using Autofac;
using Autofac.Extensions.DependencyInjection;
using chessAPI;
using chessAPI.business.interfaces;
using chessAPI.models.player;
using Microsoft.AspNetCore.Authorization;
using Serilog;
using Serilog.Events;
using chessAPI.dataAccess.providers.postgreSQL;
using Microsoft.EntityFrameworkCore;
using chessAPI.models;
using Npgsql;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using Microsoft.AspNetCore.Mvc;
using Dapper;

//Serilog logger (https://github.com/serilog/serilog-aspnetcore)
Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Override("Microsoft.AspNetCore", LogEventLevel.Warning)
    .Enrich.FromLogContext()
    .WriteTo.Console()
    .CreateBootstrapLogger();

try
{
    Log.Information("chessAPI starting");
    var builder = WebApplication.CreateBuilder(args);

    var connectionStrings = new connectionStrings();
    builder.Services.AddOptions();
    builder.Services.Configure<connectionStrings>(builder.Configuration.GetSection("ConnectionStrings"));
    builder.Configuration.GetSection("ConnectionStrings").Bind(connectionStrings);

    // Two-stage initialization (https://github.com/serilog/serilog-aspnetcore)
    builder.Host.UseSerilog((context, services, configuration) => configuration.ReadFrom
             .Configuration(context.Configuration)
             .MinimumLevel.Override("Microsoft.AspNetCore", LogEventLevel.Warning).ReadFrom
             .Services(services).Enrich
             .FromLogContext().WriteTo
             .Console());

    // Autofac como inyecci√≥n de dependencias
    builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());
    builder.Host.ConfigureContainer<ContainerBuilder>(builder => builder.RegisterModule(new chessAPI.dependencyInjection<int, int>()));
    var app = builder.Build();
    app.UseSerilogRequestLogging();
    app.UseMiddleware(typeof(chessAPI.customMiddleware<int>));
    app.MapGet("/", () =>
    {
        return "hola mundo";
    });

    app.MapGet("/getplayers", () =>
    {
        Conexion jugadores = new Conexion();
        return jugadores.ReadPlayers("select * from player");
    });

    app.MapGet("/getgames", () =>
    {
        Conexion juegos = new Conexion();
        return juegos.ReadGames("select * from game");
    });

    app.MapPost("/player", (clsNewPlayer newPlayer)=> {
        var query = "CREATE TABLE IF NOT EXISTS player(id_player int primary key generated by default as identity,email varchar(50) not null);" +                             
                    "INSERT INTO player (email) values('@email');";
        var exquery = query.Replace("@email",newPlayer.email);            
        Conexion jugador = new Conexion();
        jugador.ExecuteNonQuery(exquery);
    });

    app.MapPost("/game", (clsNewGame newGame) =>
    {
        var query = "INSERT INTO public.game(started, whites, blacks, turn, winner)VALUES (NOW(), @whites, @blacks, @turn, @winner);";
        query = query.Replace("@whites", Convert.ToString(newGame.whites));
        query = query.Replace("@blacks", Convert.ToString(newGame.blacks));
        query = query.Replace("@turn", Convert.ToString(newGame.turn));
        query = query.Replace("@winner", Convert.ToString(newGame.winner));

        Conexion jugador = new Conexion();
        jugador.ExecuteNonQuery(query);
    });

    app.MapPut("/updateplayer",(clsPlayer<int> Player) => {
         var query = "update player set email = '@email' where id = @id;";
        var exquery = query.Replace("@email",Player.email);
        exquery = exquery.Replace("@id",Convert.ToString(Player.id));            
        Conexion jugador = new Conexion();
        jugador.ExecuteNonQuery(exquery);
    });

    app.MapPut("/updategame", (clsGame game) =>
    {
        var query = "UPDATE public.game SET whites=@whites, blacks=@blacks, turn=@turn, winner=@winner WHERE id=@id;";
        query = query.Replace("@whites", Convert.ToString(game.whites));
        query = query.Replace("@blacks", Convert.ToString(game.blacks));
        query = query.Replace("@turn", Convert.ToString(game.turn));
        query = query.Replace("@winner", Convert.ToString(game.winner));
        Conexion jugador = new Conexion();
        jugador.ExecuteNonQuery(query);
    });


    //app.MapPost("/CrearUnEquipo", ([FromBody] string _name) =>
    //{
    //    using (var db = new NpgsqlConnection(connectionStrings.relationalDBConn))
    //    {
    //        var queryinsert = "INSERT INTO public.team(name, created_at) VALUES (@name, NOW());";
    //        var result = db.Execute(queryinsert, new { name = _name });
    //    }
    //    return Results.Ok("");
    //});



    app.MapPost("/CrearPartida", ( gameteams teams) =>
    {

        using (var db = new NpgsqlConnection(connectionStrings.relationalDBConn))
        {
            var queryquantity = "select count(*) as quantity from team where id = @id1 OR id = @id2";
            var quantity = db.Query<int>(queryquantity, new {id1 = teams.id_t1,id2= teams.id_t2});

            if (quantity.First() == 2)
            {
                var queryinsert = "INSERT INTO public.game(started, whites, blacks, turn)VALUES (NOW(), @whites, @blacks, true);";
                var result = db.Execute(queryinsert, new {whites=teams.id_t1,blacks=teams.id_t2});
                return Results.Ok("El juego comienza");
            }
            else
            {
                return Results.NotFound("no todos los equipos existen");
            }

        }
        
       
    });


    app.MapPut("/unirsepartida", (team_player team) =>
    {

        using (var db = new NpgsqlConnection(connectionStrings.relationalDBConn))
        {
            var teamqueryquantity = "select count(*) as quantity from team where id = @id1";
            var teamquantity = db.Query<int>(teamqueryquantity, new { id1 = team.team_id});

            var playerqueryquantity = "select count(*) as quantity from team_player where player_id = @id1";
            var playerquantity = db.Query<int>(playerqueryquantity, new { id1 = team.player_id });

            if (teamquantity.First() == 1 && playerquantity.First() == 0)
            {
                var queryinsert = "INSERT INTO public.team_player(team_id, player_id) VALUES (@team_id, @player_id);";
                var result = db.Execute(queryinsert, new { team_id = team.team_id , player_id = team.player_id });
                return Results.Ok("Jugador agregado al equipo");
            }
            else if(teamquantity.First() != 1)
            {
                return Results.NotFound("No se encontro el equipo");
            }
            else if(playerquantity.First() != 0)
            {
                return Results.BadRequest("El jugador ya esta agregado a un equipo");
            }

            return Results.Ok();

        }
       
    });


    //app.MapPost("player", 
    //[AllowAnonymous] async(IPlayerBusiness<int> bs, clsNewPlayer newPlayer) => Results.Ok(await bs.addPlayer(newPlayer)));

    
    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "chessAPI terminated unexpectedly");
}
finally
{
    Log.CloseAndFlush();
}
